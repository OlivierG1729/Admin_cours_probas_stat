base_imp_c[, duree_veuvage:= as.factor(duree_veuvage)]
base_imp_c[, proprio:= as.factor(proprio)]
base_imp_c[, proprio_entree:= as.factor(proprio_entree)]
base_imp_c[, placement_entree:= as.factor(placement_entree)]
base_imp_c[, pres_aspa_senior:= as.factor(pres_aspa_senior)]
base_imp_c[, pres_ash_senior_cor:= as.factor(pres_ash_senior_cor)]
base_imp_c[, AIDELOG:= as.factor(AIDELOG)]
base_imp_c[, region:= as.factor(region)]
base_imp_c[, revenu_nonind_modele:= as.numeric(revenu_nonind_modele)]
base_imp_c[, revenu_ind_foyer_modele:= as.numeric(revenu_ind_foyer_modele)]
base_imp_c[, ZIMPOT:= as.numeric(ZIMPOT)]
base_imp_c[, IDSENIOR:= as.character(IDSENIOR)]
# 3.b. Base Patrimoine
setnames(dtpp,  "POND","POIDS_SENIOR")
setnames(dtpp,  "MATRIPR","ETAMATRI_3")
setnames(dtpp,  "AGEPR","AGE")
# on redéfinit dans la base patrimoine dtpp les mêmes variables que celles
# qu'on a définies ci-dessus dans la base CARE-I base_imp_c
dtpp[, AGEQ_CJ_entree:=AGEQ_cj]
dtpp[, CSP_CJ_8_entree:=CSP_CJ_8]
dtpp[, couple_entree:=couple]
dtpp[, IDSENIOR:=IDENT]
dtpp[, proprio:=NA_character_]
# dtpp[,proprio_entree:=NA_character_]
dtpp[, proprio_entree:="non"][PATIMM>0, proprio_entree:="oui"]
dtpp[, BASECARE:=0]
dtpp[, PLACEMENTFIN_SENIOR_C:=NA_character_]
dtpp[, MTNT_PLACEMENTFIN_I:=NA_real_]
dtpp[, pres_aspa_senior:=NA_character_]
dtpp[, pres_ash_senior_cor:=NA_character_]
dtpp[, placement_entree:="non"][PATFISOM_sans_cc>0, placement_entree:="oui"]
dtpp[, STATUT_ETAB:=NA_character_]
dtpp[, revenu_ind_foyer_modele:=REV_IND_FOYER_I]
dtpp[, revenu_nonind_modele:=REV_NONIND_FOYER_I]
# base_imp_p = la table Patrimoine restreinte aux variables utiles à l'imputation
# NOTE : ces variables sont les mêmes pour base_imp_c (CARE-I) et base_imp_p (Patrimoine)
# tout comme on a défini une base base_imp_c CARE-I pour l'imputation, on
# définit une base base_imp_c Patrimoine pour l'imputation
base_imp_p <- dtpp[, list(TCLNAIS,
TCCOUPLE_c,couple,couple_entree,ETAMATRI_3, AGE,AGEQ,AGEQ_cj, AGEQ_CJ_entree,
SEXE, CSP_8,CSP_CJ_8, CSP_CJ_8_entree,CSP_CJ_DCD_8, revenu_nonind_modele,
revenu_ind_foyer_modele, ZIMPOT,  POIDS_SENIOR,duree_veuvage,
PLACEMENTFIN_SENIOR_C,MTNT_PLACEMENTFIN_I,placement_entree,
REVACTFI,
RFONC,RTO_FOYER_I,VAL_FOYER_I,VAM_FOYER_I, IDSENIOR, PATFISOM,PATFISOM_sans_cc, PATIMM,PATRI_BRUT,PATRI_NET, BASECARE,proprio,proprio_entree,STATUT_ETAB,pres_aspa_senior,
pres_ash_senior_cor,AIDELOG,region)]
base_imp_p[,TCLNAIS_2:=TCLNAIS][TCLNAIS %in% c("NR"),TCLNAIS_2:=NA_character_]
base_imp_p[,AGEQ_CJ_entree:=AGEQ_CJ_entree][AGEQ_CJ_entree %in% c("NR"),AGEQ_cj:=NA_character_]
base_imp_p[,TCLNAIS_2:= as.factor(TCLNAIS_2)]
base_imp_p[,TCCOUPLE_c:= as.factor(TCCOUPLE_c)]
base_imp_p[,couple:= as.factor(couple)]
base_imp_p[,couple_entree:= as.factor(couple_entree)]
base_imp_p[,ETAMATRI_3:= as.factor(ETAMATRI_3)]
base_imp_p[,AGEQ:= as.factor(AGEQ)]
base_imp_p[,AGEQ_CJ_entree:= as.factor(AGEQ_CJ_entree)]
base_imp_p[,SEXE:= as.factor(SEXE)]
base_imp_p[,CSP_8:= as.factor(CSP_8)]
base_imp_p[,CSP_CJ_8_entree:= as.factor(CSP_CJ_8_entree)]
base_imp_p[,CSP_CJ_DCD_8:= as.factor(CSP_CJ_DCD_8)]
base_imp_p[,BASECARE:= as.factor(BASECARE)]
base_imp_p[,IDSENIOR:= as.character(IDSENIOR)]
base_imp_p[,RFONC:= as.factor(RFONC)]
base_imp_p[,RTO_FOYER_I:= as.factor(RTO_FOYER_I)]
base_imp_p[,VAM_FOYER_I:= as.factor(VAM_FOYER_I)]
base_imp_p[,VAL_FOYER_I:= as.factor(VAL_FOYER_I)]
base_imp_p[,duree_veuvage:= as.factor(duree_veuvage)]
base_imp_p[,proprio:= as.factor(proprio)]
base_imp_p[,proprio_entree:= as.factor(proprio_entree)]
base_imp_p[,AIDELOG:= as.factor(AIDELOG)]
base_imp_p[,region:= as.factor(region)]
base_imp_p[,revenu_nonind_modele:= as.numeric(revenu_nonind_modele)]
base_imp_p[,revenu_ind_foyer_modele:= as.numeric(revenu_ind_foyer_modele)]
base_imp_p[,ZIMPOT:= as.numeric(ZIMPOT)]
base_imp_p[,IDSENIOR:= as.character(IDSENIOR)]
# 3.c. Compilation des bases base_imp_c et base_imp_p
base_cum60 <- rbind(base_imp_c, base_imp_p, fill=TRUE)
# NOTE 28/01 (encore d'actualité ?) : la variable ANNEE_entree_nonimp est
# donc mise en NA pour la partie de base_cum60 issue de la base Patrimoine
# creation variable type_menage
# type_menage = prend les modalités couple, f seule, h seul, veuf et veuve
base_cum60[,type_menage:="couple"][couple %in% ("veuf") & SEXE %in% c("2"),
type_menage:="veuve"][couple %in% ("veuf") & SEXE %in% c("1"),
type_menage:="veuf"][couple %in% ("seul") & SEXE %in% c("2"),
type_menage:="f seule"][couple %in% ("seul") & SEXE %in% c("1"),
type_menage:="h seul"]
base_cum60[,type_menage:= as.factor(type_menage)]
# type_menage_entree = prend les mêmes modalités que type_menage
base_cum60[,type_menage_entree:="couple"][ couple_entree %in% ("veuf")  & SEXE %in% c("2"),type_menage_entree:="veuve"][ couple_entree %in% ("veuf")  & SEXE %in% c("1"),type_menage_entree:="veuf"][ couple %in% ("seul")  & SEXE %in% c("2"),type_menage_entree:="f seule"][ couple %in% ("seul")  & SEXE %in% c("1"),type_menage_entree:="h seul"]
base_cum60[,type_menage_entree:= as.factor(type_menage_entree)]
#  NOTE 28/01 : redéfinition de modalites de toutes les variables liées à la CSP du senior ou du conjoint
base_cum60[, CSP_CJ_DCD_8:=CSP_CJ_DCD_8][CSP_CJ_DCD_8 %in% c("9 NR"),
CSP_CJ_DCD_8:=NA_character_][CSP_CJ_DCD_8 %in% c("9 NR"),
CSP_CJ_DCD_8:=NA_character_]
base_cum60[, CSP_CJ_DCD_8_entree:=CSP_CJ_DCD_8][couple %in% ("veuf") & couple_entree %in% ("en couple"),
CSP_CJ_DCD_8_entree:="10 NC"]
base_cum60[, CSP_8:=CSP_8][CSP_8 %in% c("9 NR"),
CSP_8:= NA_character_]
base_cum60[, CSP_CJ_8:=CSP_CJ_8][CSP_CJ_8 %in% c("9 NR"),
CSP_CJ_8:= NA_character_]
base_cum60[, CSP_CJ_8_entree:=CSP_CJ_8_entree][CSP_CJ_8_entree %in% c("9 NR"),
CSP_CJ_8_entree:= NA_character_]
base_cum60 <- base_cum60[, RFONC:=RFONC][RFONC %in% c(""),
RFONC:=NA_character_]
base_cum60[, revenu_ind_foyer_modele_c:=revenu_ind_foyer_modele][couple_entree=="en couple" & couple=="veuf",
revenu_ind_foyer_modele_c:=NA_real_ ]
# base_cum60_sanscc = sans compte chèque
base_cum60_sanscc <- base_cum60
save(dt, file =  paste0(dossier_sauvegarde_rdata, "/06_data_care.Rdata"))
save(base_cum60_sanscc, file = paste0(dossier_revenus_patrimoine, "/base_cum60_sanscc.RData"))
load(paste0(dossier_revenus_patrimoine, "/base_cum60_sanscc.RData"))
# base_imp est donc dans la base empilée CARE-I + Patrimoine des variables
# mobilisées dans l'imputation
base_imp <- base_cum60_sanscc
# colonnes des variables liées à l'imputation
column_imputation_methods <- list("IDSENIOR" = "",
"type_menage" = "",
"type_menage_entree" = "",
"TCLNAIS_2" = "",
"TCCOUPLE_c" = "",
"couple" = "",
"couple_entree" = "",
"ETAMATRI_3" = "",
"AGEQ" = "",
"AGEQ_CJ_entree" = "",
"SEXE" = "",
"CSP_8" = "",
"CSP_CJ_8" = "",
"CSP_CJ_8_entree" = "",
"CSP_CJ_DCD_8" = "",
"CSP_CJ_DCD_8_entree"="",
"CSP_menage_2" = "",
"revenu_nonind_modele" = "",
"revenu_ind_foyer_modele"  = "",
"ZIMPOT" = "",
"REVACTFI"  = "",
"RFONC" = "",
"RTO_FOYER_I"="",
"VAL_FOYER_I"="",
"VAM_FOYER_I"="",
"PATFISOM"="",
"PATFISOM_sans_cc"="",
"PATIMM"="",
"PATRI_BRUT" ="" ,
"PATRI_NET"="",
"proprio_entree"="",
"placement_entree"="",
"STATUT_ETAB"="",
#"pres_aspa_senior"="",
"pres_ash_senior_cor"="",
"AIDELOG"="",
"region"="")
# on efface tous les objets qui ne sont plus
# utiles
rm(base_cum60, base_cum60_sanscc,
complement_care_i, df_naiss_cj,
base_imp_p, base_imp_c, dt, dt_ehpad,
dtp, dtp_apa, dtpi, dtpp, dtprt,
dtprt1, dtprt2, liste_menage,
patrimoine_individu, patrimoine_menage,
patrimoine_produit, tab1)
# on définit base_care_avant_imputation_vax et
# base_patri_avant_imputation_vax
base_care_avant_imputation_vax <- base_imp %>%
filter(BASECARE=="1")
base_patri_avant_imputation_vax <- base_imp %>%
filter(BASECARE=="0")
##################################################################################
# NOTE 13/04 :
# PLAN modifications pré-imputations
#
# 4. Pré-imputations CARE-I -- on a entre autres imputé AGEQ (--> calage)
#     Après imputation, construire :
#       - care_i_avant_imputation_vax
#       - care_i_apres_imputation_vax
#
#    Pré-imputations Patrimoine
#     Après imputation, construire :
#       - patrimoine_avant_imputation_vax
#       - patrimoine_apres_imputation_vax
#
# 5. Calage de Patrimoine sur CARE-I, marges = type_menage x CSP et AGEQ
#
# 6. Duplication des bases CARE-I, Patrimoine via poids calés
#       - Dupliquer les 4 bases créées en 5 et 6
#       - Faire les compilations care_patri_dupliquees_avant_après_imputation_vax
#
# 7. Imputation patrimoines immobilier et financier
##################################################################################
##########################################################################################
#        4. Pré-imputations des valeurs manquantes dans CARE-I, puis dans Patrimoine          #
##########################################################################################
# ---- 4.a. Pré-imputation MICE pour CARE-I ----
var <- c("TCLNAIS_2", "type_menage_entree", "AGEQ","AGEQ_CJ_entree" ,
"CSP_8","CSP_CJ_8_entree","CSP_CJ_DCD_8_entree","RFONC","RTO_FOYER_I","VAL_FOYER_I","VAM_FOYER_I", "revenu_nonind_modele",
"revenu_ind_foyer_modele_c",
"proprio_entree","placement_entree","STATUT_ETAB",  #"pres_aspa_senior",
"pres_ash_senior_cor","AIDELOG","region")
length(var)
data_mice_care <- base_care_avant_imputation_vax %>%
dplyr::select(var)
# on affecte à chaque variable une méthode d'imputation (sous
# forme de liste)
column_imputation_methods1 <- column_imputation_methods[var]
column_imputation_methods1[c("TCLNAIS_2", "type_menage_entree", "AGEQ","AGEQ_CJ_entree" ,
"CSP_8","CSP_CJ_8_entree","CSP_CJ_DCD_8_entree","RFONC","RTO_FOYER_I","VAL_FOYER_I","VAM_FOYER_I", "revenu_nonind_modele",
"revenu_ind_foyer_modele_c","proprio_entree","placement_entree","STATUT_ETAB", #"pres_aspa_senior",
"pres_ash_senior_cor","AIDELOG","region")] <- c("pmm","" ,"pmm","pmm","pmm","pmm", "pmm", "", "", "", "", "","pmm","logreg","logreg","","","","") # CSP_8, MINVIE et RFONC ont des valeurs manquantes dans Patrimoine ;
# TCLNAIS, AGEQ et PATFISOM (obviously) ont des valeurs manquantes dans CARE
set.seed(123)
imputation_methods <- sapply(colnames(data_mice_care),
function(x){return(column_imputation_methods1[[x]])})
# --------------------------------------------------------------------------------
#                      Point de sauvegarde 1
#
# sauvegarde de tout l'environnement jusque là
save(list = ls(),
file = paste0(dossier_sauvegarde_rdata,
"/06_data_part1.Rdata")
)
# --------------------------------------------------------------------------------
######## Utilisation de l'algorithme MICE d'imputation multiple ########
# En dupliquant les lignes selon les poids
mice_mod_care <- mice::mice(data_mice_care,
m = 1,
maxit = 10,
print = T,
vis = "monotone",
method=imputation_methods)
# mice_output = le dataframe data_mice (= base_care restreint aux variables de var)
# après imputation des valeurs manquantes
mice_output_care <- mice::complete(mice_mod_care)
mice_output_care
View(mice_output_care)
View(data_mice_care)
View(mice_output_care)
View(base_care_avant_imputation_vax)
########################################################################
#                                                                      #
#  Programme de calcul des montants moyens APA, ASH, APL, ALS          #
#  en 2024                                                             #
#  BHD                                                                 #
#                                                                      #
# Dernière MAJ : 22/05/2024                                            #
########################################################################
rm(list=ls())
library(dplyr)
library(data.table)
# library(rdrees)
# library(survey)
# library(descr)
# #library(Hmisc)
# library(openxlsx)
# #library(plyr)
# library(ggplot2)
# # library(scales)
# # library(wesanderson)
# library(reldist)
# # library(cowplot)
# library(stringr)
# library(knitr)
# library(wesanderson)
# library(mice)
# # library(margins)
# # library(RColorBrewer)
# setDTthreads(threads = 0)
base_atnmx <- fread("T:/BHD/BHD - Autonomix/Etablissement/Bases/4-Simulations/Master/dd_diff_juillet2022/base_simulee_2019_3_edv_basse_intermediaire_recales aide sociale.csv", stringsAsFactors = FALSE)
# res$APA_annee_sim
# res$GIR_I
dossier_load0 <- "C:/Users/olivier.guin/Travail/Autonomix/Travaux/Sujet_grignotage_patrimoine/Code/rdata/rdata_production"
load(paste0(dossier_load0, "/00_data.Rdata"))
load(paste0(dossier_sauvegarde_rdata, "/01_data.RData"))
load(paste0(dossier_sauvegarde_rdata, "/02_data.RData"))
load(paste0(dossier_sauvegarde_rdata, "/04_data.RData"))
load(paste0(dossier_sauvegarde_rdata, "/06_data_care.Rdata"))
load(paste0(dossier_sauvegarde_rdata, "/06_data_sansduplication.Rdata"))
load(paste0(dossier_sauvegarde_rdata, "/13_data.Rdata"))
load("T:/BHD/BHD - Autonomix/Etablissement/Bases/3-Imputations/Module_patrimoine/base_impute_option5_sanscc_avec_statut_ash_reg.RData") # base du 13 juin 2023
# chargement des fonctions utiles pour la simulation
chemin_autonomix_ressources_ <- "C:/Users/olivier.guin/Travail/Autonomix/Gitlab/autonomix_ressources/ATNMXOutils/R/"
source(file = paste0(chemin_autonomix_ressources_, "gen_fichier_parametres.R"))
source(file = paste0(chemin_autonomix_ressources_, "Autonomix-fonctions-utiles.R"))
View(base_simulee24)
unique(base_simulee24$reg_lib)
load(paste0(dossier_bases, "/1-Entrees_brutes/patrimoine_menage.RData"))
########################################################################
#                                                                      #
#  Programme d'imputation du patrimoine                                #
#                                                                      #
#  BHD - Reprise du programme écrit par Stéphanie Boneschi             #
#                                                                      #
# Dernière MAJ : 14/04/2024                                            #
########################################################################
rm(list=ls())
library(ggplot2)
library(mice)
library(dplyr)
library(data.table)
library(survey)
library(descr)
library(openxlsx)
library(reldist)
library(stringr)
library(icarus)
############################################################################################
#                          0. Importation des données et des fonctions                     #
############################################################################################
dossier_load0 <- "C:/Users/olivier.guin/Travail/Autonomix/Travaux/Sujet_grignotage_patrimoine/Code/rdata/rdata_production"
load(paste0(dossier_load0, "/00_data.Rdata"))
load(paste0(dossier_sauvegarde_rdata, "/02_data.RData"))
load(paste0(dossier_revenus_patrimoine, "/base_rev_patri.RData"))
load(paste0(dossier_bases, "/1-Entrees_brutes/patrimoine_menage.RData"))
View(patrimoine_menage)
patrimoine_menage <- as.data.table(patrimoine_menage)
# NOTE 13/04 : restriction à la métropole
patrimoine_menage <- patrimoine_menage %>%
filter(ZEAT!="0")
# dtp = table patrimoine_menage
dtp <- patrimoine_menage
dtp[, un := 1]
dtp$un
# AGEQuinq = âge quiquennalisé de la personne de référence
dtp[,
AGEQuinq:="1-moins60"][AGEPR>=60 & AGEPR<75,
AGEQuinq:="60-moins75"][AGEPR>=75 & AGEPR<80,
AGEQuinq:="75-moins80"][AGEPR>=80 & AGEPR<85,
AGEQuinq:="80-moins85"][AGEPR>=85 & AGEPR<90,
AGEQuinq:="85-moins90"][AGEPR>=90,
AGEQuinq:="90plus"]
unique(dtp$AGEQuinq)
colnames(dtpi)
load(paste0(dossier_bases,"/1-Entrees_brutes/patrimoine_individu.RData"))
# dtpi = table patrimoine individu
dtpi <- patrimoine_individu
# transforme base en data.table
dtpi <- as.data.table(dtpi)
# NOTE 12/04 : on ne garde que les individus inactifs de plus de 65 ans
dtpi <- dtpi[AGE>=65 & ACTIF=="2",] # 4952 de plus de 65 ans(6238 de plus de 60 ans et 3320 individus si selectionne plus de 70 ans inactives )
# dtpi <- dtpi[AGE>=65 & ACTIF=="2",] # 4952 de plus de 65 ans (6238 de plus de 60 ans et 3320 individus si selectionne plus de 70 ans inactives )
dtpi <- dtpi[, list(IDENT)]
colnames(dtpi)
colnames(dtp)
colnames(patrimoine_menage)
colnames(patrimoine_individu)
sort(colnames(patrimoine_individu))
sort(colnames(patrimoine_menage))
unique(patrimoine_menage$ZEAT)
table(patrimoine_menage$ZEAT)
sum(table(patrimoine_menage$ZEAT))
x <- seq(0, 2, by = 1)
y <- seq(0, 3, by = 1)
y
x
vect_x <- seq(0, 2, by = 1)
vect_y <- seq(0, 3, by = 1)
vect_x
vect_y
res <- 0
for(x in vect_x){
for(y in vect_y){
res <- res+2*x+y
}
}
res
ech <- rnorm(n = 100, mean = 0, sd = 1)
ech
plot(ech)
library(lattice)
x <- c(2, 8, 11, 19)
stripplot(x)
library(ggpubr)
library(cowplot)
function (seed, kind = NULL, normal.kind = NULL, sample.kind = NULL)
library(cowplot)
set.seed(1234)
wdata = data.frame(
sex = factor(rep(c("F", "M"), each=200)),
weight = c(rnorm(200, 55), rnorm(200, 58)))
head(wdata)
gghistogram(
wdata, x = "weight",
add = "mean", rug = TRUE,
fill = "sex", palette = c("#00AFBB", "#E7B800")
)
gghistogram(
wdata, x = "weight",
add = "mean", rug = TRUE)
gghistogram(
wdata, x = "weight",
add = "mean", rug = TRUE,
palette = c("#00AFBB")
)
gghistogram(
wdata, x = "weight",
add = "mean", rug = TRUE,
palette = c("#00AFBB")
)
gghistogram(
wdata, x = "weight",
add = "mean", rug = TRUE,
palette = "#00AFBB")
gghistogram(ech, x="NUSAP1",
add = "mean", rug = TRUE,
fill = "cadetblue1",
bins = 20)
ech
gghistogram(ech, x="NUSAP1",
add = "mean", rug = TRUE,
fill = "cadetblue1")
data = data.frame(ech)
View(data)
gghistogram(data, x="NUSAP1",
add = "mean", rug = TRUE,
fill = "cadetblue1")
View(data)
data = data.frame(ech)
gghistogram(data, x = ech,
add = "mean", rug = TRUE,
fill = "cadetblue1")
gghistogram(data, x = "ech",
add = "mean", rug = TRUE,
fill = "cadetblue1")
gghistogram(data, x = "ech",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100)
rm(list=ls())
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
library(ggpubr)
ech <- rnorm(n = 100, mean = 0, sd = 1)
data = data.frame(ech)
gghistogram(data, x = "ech",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100)
ech <- rnorm(n = 10000, mean = 0, sd = 1)
data = data.frame(ech)
gghistogram(data, x = "ech",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100)
ech <- rnorm(n = 1000, mean = 0, sd = 1)
data = data.frame(ech)
gghistogram(data, x = "ech",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100)
ech <- rnorm(n = 500, mean = 0, sd = 1)
data = data.frame(ech)
gghistogram(data, x = "ech",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100)
gghistogram(data, x = "ech",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100,
add_density = TRUE)
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100,
add_density = TRUE)
rm(list=ls())
library(ggpubr)
data = data.frame(ech = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100,
add_density = TRUE)
rm(list=ls())
library(ggpubr)
set.seed(123)
data = data.frame(ech = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100,
add_density = TRUE)
set.seed(1234)
data = data.frame(ech = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 100,
add_density = TRUE)
data = data.frame(ech = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 20,
add_density = TRUE)
data = data.frame(ech = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 50,
add_density = TRUE)
set.seed(123)
data = data.frame(ech = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "cadetblue1", bins = 50,
add_density = TRUE)
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "#E7B800", bins = 50,
add_density = TRUE)
data = data.frame(réalisations = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "#E7B800", bins = 50,
add_density = TRUE)
data = data.frame(realisations = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "ech",  y = "..density..",
add = "mean", rug = TRUE,
fill = "#E7B800", bins = 50,
add_density = TRUE)
data = data.frame(realisations = rnorm(n = 500, mean = 0, sd = 1))
gghistogram(data, x = "realisations",  y = "..density..",
add = "mean", rug = TRUE,
fill = "#E7B800", bins = 50,
add_density = TRUE)
